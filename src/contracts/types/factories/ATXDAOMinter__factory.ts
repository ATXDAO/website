/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ATXDAOMinter, ATXDAOMinterInterface } from "../ATXDAOMinter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_bank",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DoubleMint",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedTransferToVault",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEtherSent",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMerkleRoot",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidProof",
    type: "error",
  },
  {
    inputs: [],
    name: "MintNotStarted",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "tokenURI",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "Mint",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "tokenURI",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "oldTokenId",
        type: "uint256",
      },
    ],
    name: "TradeIn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "string",
        name: "tokenURI",
        type: "string",
      },
    ],
    name: "canMint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "string",
        name: "tokenURI",
        type: "string",
      },
    ],
    name: "canTradeIn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "endMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "hasMinted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isMintable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lastMinted",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastRoundTokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "string",
        name: "tokenURI",
        type: "string",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "string",
        name: "tokenURI",
        type: "string",
      },
    ],
    name: "mintSpecial",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mintedIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nft",
    outputs: [
      {
        internalType: "contract IATXDAONFT_V2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addrs",
        type: "address[]",
      },
    ],
    name: "resetHasMinted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bank",
        type: "address",
      },
    ],
    name: "setBank",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_isNewRound",
        type: "bool",
      },
    ],
    name: "startMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "string",
        name: "tokenURI",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tradeIn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferNftOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "string",
        name: "tokenURI",
        type: "string",
      },
      {
        internalType: "bool",
        name: "isNewMember",
        type: "bool",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620016c5380380620016c5833981016040819052620000349162000163565b6200003f33620000a6565b6001600160a01b038216620000675760405163d92e233d60e01b815260040160405180910390fd5b6200007281620000f6565b50600180546001600160a01b0319166001600160a01b03929092169190911781556006805460ff191690911790556200019b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166200011e5760405163d92e233d60e01b815260040160405180910390fd5b600680546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b80516001600160a01b03811681146200015e57600080fd5b919050565b600080604083850312156200017757600080fd5b620001828362000146565b9150620001926020840162000146565b90509250929050565b61151a80620001ab6000396000f3fe6080604052600436106101405760003560e01c806347ccca02116100b6578063bdf0f4f91161006f578063bdf0f4f9146103b1578063c095147b146103d1578063c15b1a64146103f1578063c4b5aa9614610411578063df681fd314610424578063f2fde38b1461043a57600080fd5b806347ccca02146102f05780634ab2c58914610328578063715018a6146103485780638da5cb5b1461035d578063939f58b71461037b578063a035b1fe1461039b57600080fd5b80632e686d69116101085780632e686d69146102065780632eb4a7ab1461024857806338e21cce1461026c5780633debbbc01461029c57806345ae6606146102bc57806346b45af7146102d657600080fd5b8063017043a514610145578063090d23b91461015c578063150b7a021461017c5780631a04c4ec146101c65780632266895b146101e6575b600080fd5b34801561015157600080fd5b5061015a61045a565b005b34801561016857600080fd5b5061015a610177366004610f63565b61046e565b34801561018857600080fd5b506101a8610197366004610fc7565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020015b60405180910390f35b3480156101d257600080fd5b5061015a6101e1366004611036565b610482565b3480156101f257600080fd5b5061015a610201366004611097565b6104d8565b34801561021257600080fd5b50610236610221366004610f63565b60056020526000908152604090205460ff1681565b60405160ff90911681526020016101bd565b34801561025457600080fd5b5061025e60025481565b6040519081526020016101bd565b34801561027857600080fd5b5061028c610287366004610f63565b610633565b60405190151581526020016101bd565b3480156102a857600080fd5b5061015a6102b7366004610f63565b61065b565b3480156102c857600080fd5b506006546102369060ff1681565b3480156102e257600080fd5b5060045461028c9060ff1681565b3480156102fc57600080fd5b50600154610310906001600160a01b031681565b6040516001600160a01b0390911681526020016101bd565b34801561033457600080fd5b5061015a610343366004611115565b6106ec565b34801561035457600080fd5b5061015a610769565b34801561036957600080fd5b506000546001600160a01b0316610310565b34801561038757600080fd5b5061015a610396366004611157565b61077d565b3480156103a757600080fd5b5061025e60035481565b3480156103bd57600080fd5b5061028c6103cc3660046111cb565b61084e565b3480156103dd57600080fd5b5061028c6103ec36600461123b565b610901565b3480156103fd57600080fd5b5061028c61040c3660046111cb565b61098c565b61015a61041f3660046112d1565b610a34565b34801561043057600080fd5b5061025e60075481565b34801561044657600080fd5b5061015a610455366004610f63565b610bb2565b610462610c2d565b6004805460ff19169055565b610476610c2d565b61047f81610c87565b50565b61048a610c2d565b610495838383610cd6565b7fec4de1eef14af3ae5d77facf1ed7a9d3d50f6285573ee0ec155fc11217fc344283838360006040516104cb9493929190611366565b60405180910390a1505050565b6104e0610c2d565b662386f26fc1000082116105065760405162bfc92160e01b815260040160405180910390fd5b8261052457604051639dd854d360e01b815260040160405180910390fd5b600160009054906101000a90046001600160a01b03166001600160a01b03166346b45af76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b919061139c565b1561060957600160009054906101000a90046001600160a01b03166001600160a01b031663017043a56040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105f057600080fd5b505af1158015610604573d6000803e3d6000fd5b505050505b600382905560028390556004805460ff19166001179055801561062e5761062e610d88565b505050565b6006546001600160a01b0390911660009081526005602052604090205460ff90811691161490565b610663610c2d565b6001600160a01b03811661068a5760405163d92e233d60e01b815260040160405180910390fd5b60015460405163f2fde38b60e01b81526001600160a01b0383811660048301529091169063f2fde38b90602401600060405180830381600087803b1580156106d157600080fd5b505af11580156106e5573d6000803e3d6000fd5b5050505050565b6106f4610c2d565b60005b8181101561062e57600060056000858585818110610717576107176113b9565b905060200201602081019061072c9190610f63565b6001600160a01b031681526020810191909152604001600020805460ff191660ff9290921691909117905580610761816113e5565b9150506106f7565b610771610c2d565b61077b6000610db6565b565b61078c33868686866000610e06565b61079533610e83565b6107a0338484610cd6565b600154604051632142170760e11b8152336004820152306024820152604481018390526001600160a01b03909116906342842e0e90606401600060405180830381600087803b1580156107f257600080fd5b505af1158015610806573d6000803e3d6000fd5b505050507fc315d643bd893da1e3ebfdefc8b0d6158febe498b1fe0bc2b96fb250c59d212b3384848460405161083f9493929190611366565b60405180910390a15050505050565b60045460009060ff168015610869575061086786610633565b155b80156108e157506001546040516370a0823160e01b81526001600160a01b03888116600483015260009216906370a0823190602401602060405180830381865afa1580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108df91906113fe565b115b80156108f757506108f785858886866000610901565b9695505050505050565b60006109816002548684610916576000610919565b60015b878760405160200161092e9493929190611417565b60405160208183030381529060405280519060200120898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929493925050610eb29050565b979650505050505050565b60045460009060ff1680156109a757506109a586610633565b155b8015610a1e57506001546040516370a0823160e01b81526001600160a01b038881166004830152909116906370a0823190602401602060405180830381865afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c91906113fe565b155b80156108f757506108f785858886866001610901565b610a4333858585856001610e06565b6001546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf91906113fe565b15610acd57604051634bfae8bb60e01b815260040160405180910390fd5b600354341015610af057604051637a60b0ed60e01b815260040160405180910390fd5b60065460405160009161010090046001600160a01b03169034908381818185875af1925050503d8060008114610b42576040519150601f19603f3d011682016040523d82523d6000602084013e610b47565b606091505b5050905080610b695760405163fb327cd560e01b815260040160405180910390fd5b610b7233610e83565b610b7d338484610cd6565b7fec4de1eef14af3ae5d77facf1ed7a9d3d50f6285573ee0ec155fc11217fc34423384843460405161083f9493929190611366565b610bba610c2d565b6001600160a01b038116610c245760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61047f81610db6565b6000546001600160a01b0316331461077b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c1b565b6001600160a01b038116610cae5760405163d92e233d60e01b815260040160405180910390fd5b600680546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b604080516001808252818301909252600091602080830190803683370190505090508381600081518110610d0c57610d0c6113b9565b6001600160a01b039283166020918202929092010152600154604051637487d3db60e11b815291169063e90fa7b690610d5090849087908790600090600401611459565b600060405180830381600087803b158015610d6a57600080fd5b505af1158015610d7e573d6000803e3d6000fd5b5050505050505050565b6006805460ff16906000610d9b836114c5565b91906101000a81548160ff021916908360ff16021790555050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60045460ff16610e2957604051630314872760e11b815260040160405180910390fd5b610e37858588868686610901565b610e54576040516309bde33960e01b815260040160405180910390fd5b610e5d33610633565b15610e7b57604051634bfae8bb60e01b815260040160405180910390fd5b505050505050565b6006546001600160a01b039091166000908152600560205260409020805460ff191660ff909216919091179055565b600082610ebf8584610ec8565b14949350505050565b600081815b8451811015610f0d57610ef982868381518110610eec57610eec6113b9565b6020026020010151610f15565b915080610f05816113e5565b915050610ecd565b509392505050565b6000818310610f31576000828152602084905260409020610f40565b60008381526020839052604090205b9392505050565b80356001600160a01b0381168114610f5e57600080fd5b919050565b600060208284031215610f7557600080fd5b610f4082610f47565b60008083601f840112610f9057600080fd5b50813567ffffffffffffffff811115610fa857600080fd5b602083019150836020828501011115610fc057600080fd5b9250929050565b600080600080600060808688031215610fdf57600080fd5b610fe886610f47565b9450610ff660208701610f47565b935060408601359250606086013567ffffffffffffffff81111561101957600080fd5b61102588828901610f7e565b969995985093965092949392505050565b60008060006040848603121561104b57600080fd5b61105484610f47565b9250602084013567ffffffffffffffff81111561107057600080fd5b61107c86828701610f7e565b9497909650939450505050565b801515811461047f57600080fd5b6000806000606084860312156110ac57600080fd5b833592506020840135915060408401356110c581611089565b809150509250925092565b60008083601f8401126110e257600080fd5b50813567ffffffffffffffff8111156110fa57600080fd5b6020830191508360208260051b8501011115610fc057600080fd5b6000806020838503121561112857600080fd5b823567ffffffffffffffff81111561113f57600080fd5b61114b858286016110d0565b90969095509350505050565b60008060008060006060868803121561116f57600080fd5b853567ffffffffffffffff8082111561118757600080fd5b61119389838a016110d0565b909750955060208801359150808211156111ac57600080fd5b506111b988828901610f7e565b96999598509660400135949350505050565b6000806000806000606086880312156111e357600080fd5b6111ec86610f47565b9450602086013567ffffffffffffffff8082111561120957600080fd5b61121589838a016110d0565b9096509450604088013591508082111561122e57600080fd5b5061102588828901610f7e565b6000806000806000806080878903121561125457600080fd5b863567ffffffffffffffff8082111561126c57600080fd5b6112788a838b016110d0565b909850965086915061128c60208a01610f47565b955060408901359150808211156112a257600080fd5b506112af89828a01610f7e565b90945092505060608701356112c381611089565b809150509295509295509295565b600080600080604085870312156112e757600080fd5b843567ffffffffffffffff808211156112ff57600080fd5b61130b888389016110d0565b9096509450602087013591508082111561132457600080fd5b5061133187828801610f7e565b95989497509550505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038516815260606020820181905260009061138b908301858761133d565b905082604083015295945050505050565b6000602082840312156113ae57600080fd5b8151610f4081611089565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016113f7576113f76113cf565b5060010190565b60006020828403121561141057600080fd5b5051919050565b606085901b6bffffffffffffffffffffffff1916815260f884901b6001600160f81b031916601482015281836015830137600091016015019081529392505050565b606080825285519082018190526000906020906080840190828901845b8281101561149b5781516001600160a01b031684529284019290840190600101611476565b505050838103828501526114b081878961133d565b92505050821515604083015295945050505050565b600060ff821660ff81036114db576114db6113cf565b6001019291505056fea2646970667358221220eac10707037a2ade07d4bf0571a37122e94eba5a9b61e7ee129a0dce834f68a264736f6c63430008130033";

type ATXDAOMinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ATXDAOMinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ATXDAOMinter__factory extends ContractFactory {
  constructor(...args: ATXDAOMinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _nftAddress: string,
    _bank: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ATXDAOMinter> {
    return super.deploy(
      _nftAddress,
      _bank,
      overrides || {}
    ) as Promise<ATXDAOMinter>;
  }
  override getDeployTransaction(
    _nftAddress: string,
    _bank: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_nftAddress, _bank, overrides || {});
  }
  override attach(address: string): ATXDAOMinter {
    return super.attach(address) as ATXDAOMinter;
  }
  override connect(signer: Signer): ATXDAOMinter__factory {
    return super.connect(signer) as ATXDAOMinter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ATXDAOMinterInterface {
    return new utils.Interface(_abi) as ATXDAOMinterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ATXDAOMinter {
    return new Contract(address, _abi, signerOrProvider) as ATXDAOMinter;
  }
}
