/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ATXDAOMinterInterface extends utils.Interface {
  functions: {
    "canMint(address,bytes32[],string)": FunctionFragment;
    "canTradeIn(address,bytes32[],string)": FunctionFragment;
    "endMint()": FunctionFragment;
    "hasMinted(address)": FunctionFragment;
    "isMintable()": FunctionFragment;
    "lastMinted(address)": FunctionFragment;
    "lastRoundTokenId()": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "mint(bytes32[],string)": FunctionFragment;
    "mintSpecial(address,string)": FunctionFragment;
    "mintedIndex()": FunctionFragment;
    "nft()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "price()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetHasMinted(address[])": FunctionFragment;
    "setBank(address)": FunctionFragment;
    "startMint(bytes32,uint256,bool)": FunctionFragment;
    "tradeIn(bytes32[],string,uint256)": FunctionFragment;
    "transferNftOwnership(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyProof(bytes32[],address,string,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canMint"
      | "canTradeIn"
      | "endMint"
      | "hasMinted"
      | "isMintable"
      | "lastMinted"
      | "lastRoundTokenId"
      | "merkleRoot"
      | "mint"
      | "mintSpecial"
      | "mintedIndex"
      | "nft"
      | "onERC721Received"
      | "owner"
      | "price"
      | "renounceOwnership"
      | "resetHasMinted"
      | "setBank"
      | "startMint"
      | "tradeIn"
      | "transferNftOwnership"
      | "transferOwnership"
      | "verifyProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canMint",
    values: [string, BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "canTradeIn",
    values: [string, BytesLike[], string]
  ): string;
  encodeFunctionData(functionFragment: "endMint", values?: undefined): string;
  encodeFunctionData(functionFragment: "hasMinted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isMintable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastMinted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastRoundTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSpecial",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetHasMinted",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "setBank", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startMint",
    values: [BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeIn",
    values: [BytesLike[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferNftOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [BytesLike[], string, string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canTradeIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasMinted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMintable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastMinted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRoundTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintSpecial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetHasMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tradeIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferNftOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;

  events: {
    "Mint(address,string,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TradeIn(address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeIn"): EventFragment;
}

export interface MintEventObject {
  to: string;
  tokenURI: string;
  price: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, string, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TradeInEventObject {
  to: string;
  tokenURI: string;
  oldTokenId: BigNumber;
}
export type TradeInEvent = TypedEvent<
  [string, string, BigNumber],
  TradeInEventObject
>;

export type TradeInEventFilter = TypedEventFilter<TradeInEvent>;

export interface ATXDAOMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ATXDAOMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canMint(
      recipient: string,
      proof: BytesLike[],
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canTradeIn(
      recipient: string,
      proof: BytesLike[],
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    endMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasMinted(recipient: string, overrides?: CallOverrides): Promise<[boolean]>;

    isMintable(overrides?: CallOverrides): Promise<[boolean]>;

    lastMinted(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    lastRoundTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    mint(
      proof: BytesLike[],
      tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintSpecial(
      to: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintedIndex(overrides?: CallOverrides): Promise<[number]>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetHasMinted(
      addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBank(
      _bank: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startMint(
      _merkleRoot: BytesLike,
      _price: BigNumberish,
      _isNewRound: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tradeIn(
      proof: BytesLike[],
      tokenURI: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferNftOwnership(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyProof(
      proof: BytesLike[],
      recipient: string,
      tokenURI: string,
      isNewMember: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  canMint(
    recipient: string,
    proof: BytesLike[],
    tokenURI: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canTradeIn(
    recipient: string,
    proof: BytesLike[],
    tokenURI: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  endMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasMinted(recipient: string, overrides?: CallOverrides): Promise<boolean>;

  isMintable(overrides?: CallOverrides): Promise<boolean>;

  lastMinted(arg0: string, overrides?: CallOverrides): Promise<number>;

  lastRoundTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  mint(
    proof: BytesLike[],
    tokenURI: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintSpecial(
    to: string,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintedIndex(overrides?: CallOverrides): Promise<number>;

  nft(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetHasMinted(
    addrs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBank(
    _bank: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startMint(
    _merkleRoot: BytesLike,
    _price: BigNumberish,
    _isNewRound: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tradeIn(
    proof: BytesLike[],
    tokenURI: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferNftOwnership(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyProof(
    proof: BytesLike[],
    recipient: string,
    tokenURI: string,
    isNewMember: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    canMint(
      recipient: string,
      proof: BytesLike[],
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canTradeIn(
      recipient: string,
      proof: BytesLike[],
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    endMint(overrides?: CallOverrides): Promise<void>;

    hasMinted(recipient: string, overrides?: CallOverrides): Promise<boolean>;

    isMintable(overrides?: CallOverrides): Promise<boolean>;

    lastMinted(arg0: string, overrides?: CallOverrides): Promise<number>;

    lastRoundTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    mint(
      proof: BytesLike[],
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintSpecial(
      to: string,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintedIndex(overrides?: CallOverrides): Promise<number>;

    nft(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetHasMinted(addrs: string[], overrides?: CallOverrides): Promise<void>;

    setBank(_bank: string, overrides?: CallOverrides): Promise<void>;

    startMint(
      _merkleRoot: BytesLike,
      _price: BigNumberish,
      _isNewRound: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeIn(
      proof: BytesLike[],
      tokenURI: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferNftOwnership(to: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyProof(
      proof: BytesLike[],
      recipient: string,
      tokenURI: string,
      isNewMember: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Mint(address,string,uint256)"(
      to?: null,
      tokenURI?: null,
      price?: null
    ): MintEventFilter;
    Mint(to?: null, tokenURI?: null, price?: null): MintEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TradeIn(address,string,uint256)"(
      to?: null,
      tokenURI?: null,
      oldTokenId?: null
    ): TradeInEventFilter;
    TradeIn(to?: null, tokenURI?: null, oldTokenId?: null): TradeInEventFilter;
  };

  estimateGas: {
    canMint(
      recipient: string,
      proof: BytesLike[],
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canTradeIn(
      recipient: string,
      proof: BytesLike[],
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasMinted(recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMintable(overrides?: CallOverrides): Promise<BigNumber>;

    lastMinted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastRoundTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      proof: BytesLike[],
      tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintSpecial(
      to: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetHasMinted(
      addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBank(
      _bank: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startMint(
      _merkleRoot: BytesLike,
      _price: BigNumberish,
      _isNewRound: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tradeIn(
      proof: BytesLike[],
      tokenURI: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferNftOwnership(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyProof(
      proof: BytesLike[],
      recipient: string,
      tokenURI: string,
      isNewMember: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canMint(
      recipient: string,
      proof: BytesLike[],
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canTradeIn(
      recipient: string,
      proof: BytesLike[],
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasMinted(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMintable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastMinted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRoundTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      proof: BytesLike[],
      tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintSpecial(
      to: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintedIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetHasMinted(
      addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBank(
      _bank: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startMint(
      _merkleRoot: BytesLike,
      _price: BigNumberish,
      _isNewRound: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tradeIn(
      proof: BytesLike[],
      tokenURI: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferNftOwnership(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyProof(
      proof: BytesLike[],
      recipient: string,
      tokenURI: string,
      isNewMember: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
