/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ATXDAOMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canMint"
      | "canTradeIn"
      | "endMint"
      | "hasMinted"
      | "isMintable"
      | "lastMinted"
      | "lastRoundTokenId"
      | "merkleRoot"
      | "mint"
      | "mintSpecial"
      | "mintedIndex"
      | "nft"
      | "onERC721Received"
      | "owner"
      | "price"
      | "renounceOwnership"
      | "resetHasMinted"
      | "setBank"
      | "startMint"
      | "tradeIn"
      | "transferNftOwnership"
      | "transferOwnership"
      | "verifyProof"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Mint" | "OwnershipTransferred" | "TradeIn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canMint",
    values: [AddressLike, BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "canTradeIn",
    values: [AddressLike, BytesLike[], string]
  ): string;
  encodeFunctionData(functionFragment: "endMint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasMinted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMintable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastMinted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRoundTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSpecial",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetHasMinted",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBank",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startMint",
    values: [BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeIn",
    values: [BytesLike[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferNftOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [BytesLike[], AddressLike, string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canTradeIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasMinted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMintable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastMinted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRoundTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintSpecial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetHasMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tradeIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferNftOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
}

export namespace MintEvent {
  export type InputTuple = [
    to: AddressLike,
    tokenURI: string,
    price: BigNumberish
  ];
  export type OutputTuple = [to: string, tokenURI: string, price: bigint];
  export interface OutputObject {
    to: string;
    tokenURI: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeInEvent {
  export type InputTuple = [
    to: AddressLike,
    tokenURI: string,
    oldTokenId: BigNumberish
  ];
  export type OutputTuple = [to: string, tokenURI: string, oldTokenId: bigint];
  export interface OutputObject {
    to: string;
    tokenURI: string;
    oldTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ATXDAOMinter extends BaseContract {
  connect(runner?: ContractRunner | null): ATXDAOMinter;
  waitForDeployment(): Promise<this>;

  interface: ATXDAOMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canMint: TypedContractMethod<
    [recipient: AddressLike, proof: BytesLike[], tokenURI: string],
    [boolean],
    "view"
  >;

  canTradeIn: TypedContractMethod<
    [recipient: AddressLike, proof: BytesLike[], tokenURI: string],
    [boolean],
    "view"
  >;

  endMint: TypedContractMethod<[], [void], "nonpayable">;

  hasMinted: TypedContractMethod<[recipient: AddressLike], [boolean], "view">;

  isMintable: TypedContractMethod<[], [boolean], "view">;

  lastMinted: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  lastRoundTokenId: TypedContractMethod<[], [bigint], "view">;

  merkleRoot: TypedContractMethod<[], [string], "view">;

  mint: TypedContractMethod<
    [proof: BytesLike[], tokenURI: string],
    [void],
    "payable"
  >;

  mintSpecial: TypedContractMethod<
    [to: AddressLike, tokenURI: string],
    [void],
    "nonpayable"
  >;

  mintedIndex: TypedContractMethod<[], [bigint], "view">;

  nft: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  price: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resetHasMinted: TypedContractMethod<
    [addrs: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setBank: TypedContractMethod<[_bank: AddressLike], [void], "nonpayable">;

  startMint: TypedContractMethod<
    [_merkleRoot: BytesLike, _price: BigNumberish, _isNewRound: boolean],
    [void],
    "nonpayable"
  >;

  tradeIn: TypedContractMethod<
    [proof: BytesLike[], tokenURI: string, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferNftOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyProof: TypedContractMethod<
    [
      proof: BytesLike[],
      recipient: AddressLike,
      tokenURI: string,
      isNewMember: boolean
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canMint"
  ): TypedContractMethod<
    [recipient: AddressLike, proof: BytesLike[], tokenURI: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "canTradeIn"
  ): TypedContractMethod<
    [recipient: AddressLike, proof: BytesLike[], tokenURI: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "endMint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasMinted"
  ): TypedContractMethod<[recipient: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMintable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastMinted"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastRoundTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "merkleRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [proof: BytesLike[], tokenURI: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintSpecial"
  ): TypedContractMethod<
    [to: AddressLike, tokenURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintedIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "price"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetHasMinted"
  ): TypedContractMethod<[addrs: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBank"
  ): TypedContractMethod<[_bank: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startMint"
  ): TypedContractMethod<
    [_merkleRoot: BytesLike, _price: BigNumberish, _isNewRound: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tradeIn"
  ): TypedContractMethod<
    [proof: BytesLike[], tokenURI: string, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferNftOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [
      proof: BytesLike[],
      recipient: AddressLike,
      tokenURI: string,
      isNewMember: boolean
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TradeIn"
  ): TypedContractEvent<
    TradeInEvent.InputTuple,
    TradeInEvent.OutputTuple,
    TradeInEvent.OutputObject
  >;

  filters: {
    "Mint(address,string,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TradeIn(address,string,uint256)": TypedContractEvent<
      TradeInEvent.InputTuple,
      TradeInEvent.OutputTuple,
      TradeInEvent.OutputObject
    >;
    TradeIn: TypedContractEvent<
      TradeInEvent.InputTuple,
      TradeInEvent.OutputTuple,
      TradeInEvent.OutputObject
    >;
  };
}
